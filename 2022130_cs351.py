# -*- coding: utf-8 -*-
"""2022130-CS351.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/164HR6MxCwFdonPXH-xEzwTsCUOw53rF0

CS351- AI LAB

Non AI Version Code
"""

import random

def number_guessing_game():
    # The computer selects a random number between 1 and 100
    number_to_guess = random.randint(1, 100)
    attempts = 0
    max_attempts = 10  # Player has 10 attempts to guess the number

    print("Welcome to the Number Guessing Game!")
    print("Guess a number between 1 and 100. You have 10 attempts.")

    # Loop for the player to make guesses
    while attempts < max_attempts:
        guess = int(input("Enter your guess: "))
        attempts += 1

        if guess < number_to_guess:
            print("Too low!")
        elif guess > number_to_guess:
            print("Too high!")
        else:
            print(f"Congratulations! You guessed the number in {attempts} attempts.")
            return

    print(f"Sorry, you've used all your attempts. The number was {number_to_guess}.")

# Run the game
number_guessing_game()

"""AI Version Code"""

def ai_number_guessing_game():
    # Player selects a number
    print("Think of a number between 1 and 100, and I (the AI) will try to guess it.")
    low = 1
    high = 100
    attempts = 0

    # Loop until the AI guesses the number correctly
    while low <= high:
        guess = (low + high) // 2  # AI uses binary search to guess
        attempts += 1

        print(f"AI's guess is: {guess}")
        feedback = input("Enter 'h' if too high, 'l' if too low, or 'c' if correct: ").lower()

        if feedback == 'c':
            print(f"I (AI) guessed the number in {attempts} attempts!")
            return
        elif feedback == 'h':
            high = guess - 1  # If too high, reduce the upper bound
        elif feedback == 'l':
            low = guess + 1  # If too low, increase the lower bound

    print("Something went wrong!")

# Run the AI version
ai_number_guessing_game()

"""BFS Version Code"""

from collections import deque

def bfs_guessing_game(low, high):
    queue = deque([(low, high)])
    while queue :
        low, high = queue.popleft()
        mid = (low + high) // 2
        print(f"Is your number {mid}?")
        response = input("Enter 'h' if the guess is too high, 'l' if it's too low, or 'c' if it's correct: ")
        if response == 'h':
            queue.append((low, mid - 1))
        elif response == 'l':
            queue.append((mid + 1, high))
        elif response == 'c':
            print("Yay! I guessed your number!")
            return
        else:
            print("Invalid response. Please try again.")

bfs_guessing_game(1, 100)

"""DFS Version Code"""

class NumberGuessingGame:
    def __init__(self, min_num, max_num):
        self.min_num = min_num
        self.max_num = max_num
        self.guesses = []

    def dfs_guess(self, low, high):
        if len(self.guesses) >= 5:
            print("I couldn't guess the number in 5 attempts or less. You win!")
            return
        mid = (low + high) // 2
        self.guesses.append(mid)
        response = input(f"My guess is {mid}. Is my guess higher (H) or lower (L) than the number in your heart? ")
        if response.upper() == "H":
            self.dfs_guess(low, mid - 1)
        elif response.upper() == "L":
            self.dfs_guess(mid + 1, high)
        else:
            print("Invalid response. Please enter H or L.")
            self.dfs_guess(low, high)

    def play(self):
        print("Think of a number between 1 and 100.")
        self.dfs_guess(self.min_num, self.max_num)

game = NumberGuessingGame(1, 100)
game.play()

"""My Version Code"""

import random
import math

class SimulatedAnnealingNumberGuessingGame:
    def __init__(self, min_num, max_num):
        # Initialize the game with a minimum and maximum number
        self.min_num = min_num
        self.max_num = max_num
        self.temperature = 100  # Starting temperature for simulated annealing
        self.cooling_rate = 0.03  # Cooling rate to decrease temperature
        self.max_attempts = 5  # Max number of attempts

    def play(self):
        # Start the game by asking the player to think of a number
        print(f"Think of a number between {self.min_num} and {self.max_num}.")
        self.simulated_annealing_guess()

    def simulated_annealing_guess(self):
        # Start with a random guess within the range
        current_guess = random.randint(self.min_num, self.max_num)
        attempts = 0

        while attempts < self.max_attempts:
            # Ask for feedback based on the guess
            feedback = self.evaluate_guess(current_guess)

            # If the guess is correct, end the game
            if feedback == 0:
                print(f"Yay! I guessed the number {current_guess} correctly!")
                return

            # Perturb the guess slightly to generate a new candidate guess
            new_guess = current_guess + random.randint(-10, 10)
            new_guess = max(min(new_guess, self.max_num), self.min_num)  # Keep the guess within bounds

            # Get feedback for the new guess
            new_feedback = self.evaluate_guess(new_guess)

            # Calculate "energy difference" (delta) based on feedback
            delta = new_feedback - feedback

            # Simulated annealing logic: Accept the new guess with some probability
            if delta > 0 or random.random() < self.acceptance_probability(delta):
                current_guess = new_guess  # Accept the new guess

            # Decrease the temperature
            self.temperature *= 1 - self.cooling_rate
            attempts += 1  # Increment the number of attempts

        print(f"Sorry! I couldn't guess the number within {self.max_attempts} attempts.")

    def evaluate_guess(self, guess):
        # Ask the user if the guess is too high, too low, or correct
        response = input(f"My guess is {guess}. Enter 'h' if the guess is too high, 'l' if it's too low, or 'c' if it's correct: ").lower()
        if response == 'h':
            return -1  # Guess is higher than the target
        elif response == 'l':
            return 1  # Guess is lower than the target
        elif response == 'c':
            return 0  # Correct guess
        else:
            print("Invalid response. Please enter 'h', 'l', or 'c'.")
            return self.evaluate_guess(guess)  # Recursively ask until valid input

    def acceptance_probability(self, delta):
        # If delta is positive (better guess), always accept it
        if delta > 0:
            return 1
        # If delta is negative (worse guess), accept with a probability based on temperature
        else:
            return math.exp(delta / self.temperature)

# Create a game instance and start the game
game = SimulatedAnnealingNumberGuessingGame(1, 100)
game.play()